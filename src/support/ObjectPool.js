export default class ObjectPool {

    constructor(clazz, para) {
        ///////////////////////
        // 公有成员变量
        ///////////////////////
        this._class = clazz;   //类名
        this._para = para;      //实例化对象时的参数
        this._count = 0;        //对象池中对象的个数
        this._pool = [];        //对象池


        ///////////////////////
        // 私有成员变量
        ///////////////////////


        ///////////////////////
        // 初始化
        ///////////////////////

    }



    /***************************************************************
     * 公有成员函数
     ***************************************************************/
    getObj () {
        let pool = this._pool,
            len,
            obj;

        //如果当前已使用的对象个数大于或等于池中已有对象个数，
        //则新生成一个对象；否则从池中直接取得对象
        if (this._count >= pool.length) {
            obj = new this._class(this._para);

            len = pool.length;
            pool[len] = obj;

        } else {
            obj = pool[this._count];
        }

        //记录当前已使用的对象个数
        this._count++;

        //返回对象
        return obj;
    }



    /*
    * 当前已使用的对象个数清零
    * 这样，当函数getObj()被调用的时候，池中所有对象都可使用
    */
    releaseAll () {
        this._count = 0;
    }



    /***************************************************************
     * 私有成员函数
     ***************************************************************/

}